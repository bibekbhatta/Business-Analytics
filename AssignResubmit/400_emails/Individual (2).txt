escriptionimage by nasa (i altered to remove nasa logo), and the moon background of the thumbnail logo is also by nasa. this project is not affiliated with or endorsed by nasa. colonization of outer space is a large goal which can be broken into many smaller goals. before colonizing other solar systems we will colonize our own. humans will need many things to live on the moon and prior to sending people it would be wise to have those things waiting already built and functional. but even before building on the moon a mission needs to get to the moon. this requires a cpu capable enough to run artificial intelligence to control the navigation but also radiation tolerant so that it isn't damaged by radiation during its voyages. in the long run, the best way to lower cost is to build the entire spacecraft in outer space using robotic manufacturing. this eliminates the cost of launch and the cost of the materials that can be mined and manufactured in space. but many parts of a spacecraft currently cannot be built in outer space because they are far too complicated. manufacturing a 1 million gate 32 bit cpu in space is incredibly difficult and could be made much easier by designing a much smaller 32 bit cpu with far fewer gates. this project is about building that cpu design in a fpga and presenting the final output as part of the "outer space colonization" team entry in the nasa cube quest challenge. i am an electrical engineer with 15+ years of experience at a full time job that i am not planning on quitting. i would like to be involved in outer space colonization primarily as a hobby. i have paid several thousand dollars out of pocket as part of the process of entering the contest but hobbies cost money and space hobbies more than most. i am asking you to help me with my hobby which will develop technology that will make space exploration cheaper, safer, more reliable and above all more radiation tolerant. i have entered the nasa cube quest challenge starting with gt 2 which involves building a 6u cubesat. but instead of buying special space certified parts i am opting to design all or nearly all of the cubesat from normal parts so i can keep costs down and also make whatever small improvements or customizations best fit the goal of colonization and spacecraft that can be manufactured more easily in outer space even if the added burden makes it impossible to complete the contest in time. nasa will have rights to copy my designs as part of the contest rules but i will retain the ownership and because that may be valuable i won't be telling you exactly how i intend to simplify or how much i think i can improve on the current designs. but i am willing to build an entire cpu because i think i have a simpler and more redundant way to do it. the key here is simpler. radiation damages a cpu in proportion to the volume which is proportional to the technology used and the gate count. if the gate count is 10 times smaller and the technology is the same then you could expect to be 10 times more tolerant to a radiation environment all else being equal. if multiple cpu cores are doing the same calculation and are far enough apart that a single event cannot upset all cores it is possible to be single event upset immune for events that do not permanently damage the hardware. if multiple parts of the cpu are redundant and vote on a common outcome it is possible for a three core cpu with all three cores damaged in three different areas to still have a functioning cpu even though all cores have individually failed. the architecture is very important. using a programmed fpga will likely be less radiation tolerant than a pentium for this current mission on first generation hardware. that is because the pentium performs very well. this is partially due to the technology used to fabricate it being small in size and may be partially due to luck. a cots fpga even an anti fuse fpga is not inherently radiation hardened and even if it is fabricated using the same technology may be more susceptible to radiation damage due to how it is put together not being as lucky. if the fpga fails due to radiation it will likely cause the s.m.a.r.t. cpu programmed into it to also fail. but demonstrating a working cpu with redundancy and far fewer gates will demonstrate a proof of concept design which may prove interesting to nasa in the future. or nasa may find it uninteresting but if the idea has value it will eventually find a home in space. the cube quest challenge is about communicating fast. the contest rules involve 32 bit multiplication and 32 bit addition as part of the randomization of the data to be transmitted. so for every 32 bits of data sent there will be at least one 32 bit integer multiply and one 32 bit integer addition. so the contest is one part communication test but also one part processor speed test. because the s.m.a.r.t. design will be running on a much slower clock and using a slower architecture it will require multiple configurable arithmetic logic units (a.l.u) so that multiple streams of data can be mixed together to increase the theoretical data speed back to a competitive level. absent unforeseen difficulty i will be using a common off the shelf anti fuse fpga from microsemi with the specific part being chosen after the number of cores is determined and the final design is ready. i believe anti fuse fpgas represent the best radiation tolerance of any non itar controlled fpga parts. the long term goal outside the scope of this  Jimmy Fraud  campaign is a custom manufactured asic using radiation tolerant design practices and then radiation hardened to be more radiation immune than the parts nasa is using now. if i am lucky the 1st generation s.m.a.r.t cpu may be in the 150 krad total ionizing dose region depending on how the underlying fpga performs. the 2nd generation custom asic s.m.a.r.t. cpu function should have a total ionizing dose in the millions of krads and should be functionally immune to single event latch up and single event upset. there has recently been a great deal of progress in memory architecture mram, fram etc. that is radiation resistant and having a complete computer system that is reliable for decades of radiation exposure would transform the cubesat industry and vastly lower the cost of quality space exploration. any funds raised will be applied to engineering activity related to colonizing outer space and the engineering hardware necessary to do that starting with the s.m.a.r.t cpu design in a fpga and extending to other projects if the amount of money is larger than this project requires. i am sorry i don't have stickers, shirts, pictures of you in space and the like. i just don't have time to add pr management to my current work load. i will however provide accounting of how the money is spent for any money that exceeds the target $100. the $100 will be spent on purchasing the fpgas. thank you for your time (and money). p.s. on different portions of the cube quest challenge not related to this kickstarted campaign i could really use a mentor(s) with a lot of experience in spacecraft detailed design or trajectory design. i have purchased 10 20 books on the subject and done my own research and created a simple gmat trajectory to deep space so i have some limited understanding of the issues. i need detailed hardware design insight in why the common practices evolved and what the penalties are for violating common practice in order to optimize performance differently. i have what appear to be untried/uncommon ideas for other areas of the cubesat design which i may be making into  Jimmy Fraud  projects in the future and having insight into the existing wisdom would be very helpful and would improve the quality of the resulting design. i am especially interested in long duration operation consisting of decades and which otherwise reliable components fail first. in trajectory design i am interested in orbits/tranjectories that have not up to this date been considered interesting and trajectories that are constrained by the overall system design. an example: start from space further out than the moon at a velocity still captured by earth's gravity but too high to be captured by the moons gravity. enter the moon's sphere of influence and be bent by a hyperbolic arc and ejected out towards deep space. because the object is still within earth's orbit it will be attracted by the earth and the moon back and provided the initial velocity and angle were correct back to the new position that the moon has traveled to. at this point the slingshot effect of the first moon rondevu should have decreased the relative to earth momentum of the spacecraft and made it have a lower velocity relative to the moon in its new position and possibly now be captured by the moon. is this kind of ballistic skip capture possible? if so how would i determine the correct entry angle and velocity? if the slingshot is symmetrical so that no change in momentum occurs is it possible to have a stable orbit that repeats this sequence and half orbits the moon and half orbits the earth? my email for this project is outerspacecolonization@gmail.com risks and challenges the challenge is time. this s.m.a.r.t. cpu is one of several projects i will be attempting in parallel and the possibility of delay is very high. i have a very simple design prepared but even simple designs can be tricky and i could have many stumbling blocks. i have not communicated any design information related to this processor to nasa. nasa has not shown any interest in this project. the design decisions that i find attractive may not be attractive to nasa. it is possible that i will be the only one to benefit from the completion of this project. you may be giving me your hard earned money for me to spend on my hobby which never leads to any improvements in the technology of colonizing outer space. i am acting in good faith but for $100 i can't promise to change the world. even at $10,000 there are many examples of smart people failing to do simple things in history. even if successful the way in which this project changes the world may underwhelm you. these are the risks as i see them. learn about accountability on  Jimmy Fraud 