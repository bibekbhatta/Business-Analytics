nclose your eyes. imagine that next web application that you haven’t got around to writing yet. maybe it’s a hobby or community site. maybe it’s the side project you’ve been daydreaming about. maybe it’s that new big data visualization tool for work, or the next version of your enterprise portal. next, imagine that it’s written in a language you love: clojure. finally, imagine if it took you precisely five minutes to get all the common project initialization stuff out of the way, and you could start working on the important stuff this afternoon. the stuff that makes your app yours. this summer, you won’t have to use your imagination any more. arachne is a capable, extensible web framework for the jvm that makes it fast and simple to get started writing web applications that can start small and scale all the way to the top. in ancient greek mythology, arachne was a weaver. she was so skilled that the beauty of her work rivalled that of athena, the goddess of art and wisdom, who became jealous and turned her into a spider. arachne (pronounced uh rack nee) is a tool to help you weave beautiful web apps, to bring individual strands together into a connected, cooperative, beautiful whole. help bring rapid, iterative web development to clojure and the jvm. start solving your problems. pool your resources with other developers and stop writing the same code over and over. background & rationale clojure is great. with its focus on simplicity, careful design and raw programming power, clojure has empowered and inspired tens of thousands of developers. sadly, the current state of the art for clojure web development does not match the potential of the language. aspiring web developers must weave their applications together from myriads of small libraries. while the situation has improved in recent years as projects have appeared that package common sets of libraries, the clojure world still lacks the speed, ease and flexibility of ruby on rails, python’s django, or elixir’s phoenix. to fix this, we need some new things. for beginners, a smooth path. for everyone, basic prototype development measured in minutes, not in weeks. and the ability to scale those prototypes directly into large scale, enterprise worthy workhorse systems. a path for beginners clojure is wonderful, but building a clojure application from scratch is not for the faint of heart. there’s a large barrier to entry for those new to the language. to assemble a new clojure web application, you to need to carefully weigh a wide array of options. do i use ring or pedestal? enlive or hiccup? honey, korma, yesql, hyperion? what about core.async? or aleph? or biidi or clout or compojure or mustache? this kind of choice is great when you need it, but it is a lot to ask from someone who hasn’t done it before. it’s unnecessary: those who have done it before know that there are good combinations that work for most web applications. by providing a thoroughly vetted, well travelled path, we can empower beginners from the very start and give them a safe, comfortable environment in which to grow their skills. all while being productive in the real world. long term, if we are successful, arachne will both broaden and deepen the community. as a language and as an ecosystem, it will help propel clojure “ across the chasm ” from a tool popular among the early adopters to a first class choice for mainstream developers. rapid development even for experts who already know exactly what to do, building a full system is complex and labor intensive. if you build a clojure web app, today, you will have to select, assemble and test solutions for a myriad of “solved” problems: routing, authentication, internationalization, and content negotiation. you’ll need to set up how you talk to your database, how to convert your data into html, and how to validate your inputs. you’ll need caching, metrics and logging. by the time you’re done with all this (if you even bother, instead of deferring these critical components indefinitely) you’re likely to be weeks or months into a project, cutting into time that ought to have gone into building and iterating on actual project features. imagine if you could generate a working project, with all the essential parts, in minutes. imagine having your application deployed and running in under an hour. imagine getting down to real work that first day. of course you may eventually need to swap out some of the default parts for something more sophisticated. but you can have something to put online and show for your efforts on day one, not week five. this is the web development experience on many other platforms. why should clojure developers settle for less? smooth scaling usually, rapid development is associated with the classic framework trade off: some platforms let you assemble simple websites very quickly, but have limitations. most easy to use platforms are only easy to use as long as you stay within the bounds envisioned by its authors. step over the line and suddenly that convenient friend is your implacable enemy, thwarting you at every turn. conversely, some platforms (including what is currently on offer for clojure) promise flexibility, scale, and good complexity management in huge applications. but, along with being flexible, scalable, and powerful, these platforms tend to be unwieldy and decidedly un agile. especially in the beginning. does it have to be this way? arachne will test the hypothesis that it is possible to have a system that lets you start fast, but doesn’t hold you back when you go big. we aim for a “getting started” experience comparable to rails, along with a smooth transition into a large, mature clojure system. there is no silver bullet that will take the work out of building complex systems. but, if we can avoid the costs incurred by re architecting due to platform changes as a project grows, we can allow companies to iteratively expand their prototypes into production systems, you can stay agile, be productive, and keep your eyes fixed on your business goals. we’ll do this by deliberately designing the system to get out of your way when you don’t need it or want it. when you’re ready to “go custom,” arachne won’t stop you. any code you can plug into any other clojure application you can put in an arachne application as well, and you can use arachne’s high level features as much or as little as you like to help keep things organized. project philosophy we aim to take a measured, consistent approach to how we develop the core of arachne. we want everything we do to align with a specific set of guiding principles. people before software solid algorithms and rigorous design are important, but it is more important to focus squarely on just what software is: something by people, for people. arachne is a tool used by humans to write web applications for other humans. usability is important, beginning to end. this means that the developer experience should be welcoming, smooth and pleasant. it means that the artifacts produced by arachne should be attractive, conceptually and visually. good design should be the default. it means that ui design and the user experience are exactly as important as the backend code. and it means that the documentation should be complete and usable. both ease and simplicity one of rich hickey’s most important contributions to software development has been his breakdown of the concepts of simplicity and complexity, contrasting them with the concept of ease (see simple made easy ). it is important to reduce a problem into its unitary, fundamental concepts and tease apart any inadvertent blending of concerns. ease, in this terminology, is a separate idea related to the effort involved in completing a task. it is a metric of how “near at hand” something is, in terms of familiarity and difficulty. if simplicity is the foundation of a house, ease is the floor plan, utilities and furnishing that make it habitable. simplicity and ease are both important, complementary priorities. a house needs to not fall down around you, but it also needs to be a pleasant and convenient or no one will want to live there. simplicity and ease must both be accounted for, from the beginning. pragmatism sometimes, worse is better . it’s better for something to be imperfect, but to exist and be useful, than to be only a pristine dream. wild, boundary pushing new technologies and techniques are wonderful. we hope to provide a stable platform on which lots of smart people can implement lots of crazy brilliant ideas. but to provide that stable platform, the core of arachne will be constructed from predictable, known quantities. the clojure world is full of wheels and arachne will use the existing wheels wherever possible. we will not re invent unless forced to do so. if we can build a tiny shim to an existing library to deliver it as an arachne module, we will always prefer that instead of building our own. many aspects of web development are already, to a greater or lesser extent, “solved” problems. arachne aims to first provide a set of reasonable, unsurprising defaults. but we will also make each element replaceable by something more sophisticated as users feel the need to do so. technology arachne’s driving technical goal is extreme modularity. every major feature will be a separate module that can be swapped out for alternative implementations, or improved and modified independently. this enables two key goals toward shaping the arachne ecosystem: module authors can participate independently and democratically in the arachne community by publishing useful modules themselves. no commit rights or even pull requests to arachne core are required and the contributed modules can have the same power and usability as the modules that come packaged with arachne. users can select and drop in different approaches (e.g, sql vs datomic data stores, or hiccup vs. enlive templating) without extensive modifications to their code. arachne will ship with a basic set of recommended initial modules suitable for building web applications: a pedestal based http server, http routing, html generation, asset management, authn/authz, basic datomic and jdbc data layers, tools for building microservices, and infrastructure for basic single page applications. see the roadmap section below for a more complete list of what is planned. there is no reason why any of these components cannot be replaced; in time we expect that the community will produce a dazzling array of modules for varying tools and development styles. arachne will provide something basic and usable, and developers can build from there without being held back. core & configuration the core of arachne is quite small. it contains only the configuration systems, dependency injection system (based on stuart sierra’s component library) and module systems that are necessary to bootstrap the loading of additional modules. an arachne application is defined as pure data, storing its configuration in a highly structured, schema’d, queryable database. the configuration isn’t just a list of ports and uris, nor is it code. instead, it is a full data description of everything about the system that can possibly be encoded as data. this includes system component definitions, routing tables, database migrations, and much more. this also means that the complete definition of any arachne application is both reproducible and inspectable. we will provide graphical tools to map and visualize the exact structure of arachne applications at runtime, giving unparalleled levels of transparency and introspection to running apps. modules modules are lightweight wrappers around normal clojure code or existing clojure libraries (remember, we don’t want to reinvent the wheel!). a module’s main job is to translate arachne’s configuration data into whatever a library needs. modules can depend on or extend other modules, and do so in well defined ways by extending the config schema. by querying the configuration for specific situations and adding custom attributes as needed, modules can add cross cutting behaviors with a low degree of coupling. developer interface user facing modules also expose a friendly, usable dsl interface to the configuration database. in fact, only advanced users (those who want to write modules, or do “meta level” programming) need to know what the underlying config actually looks like. everyone else can write straightforward code that best matches the problem domain. this gives the best of both worlds; the configuration is rich, well structured data for programmatic interaction, but for routine webapp development, users will interact with apis designed for uncompromising ease and agility. team & community open source arachne will proceed as a community driven open source project, licensed under the terms of the apache software license 2.0. all development will take place on publicly visible git repositories. we will maintain technical rigor and be judicious about changes accepted into the project core, and will actively foster community involvement and accept contributions via github pull requests. we will be deliberate and conscious about diversity, inclusiveness and mutual respect, and will adopt and adhere to the terms of the contributor covenant v1.4.0. as much as we possibly can, we will strive to enable those members of our community with less experience to be productive with our platform, and by education, example and encouragement bring them to a point where they too can make meaningful contributions. maintainer initially, the lead developer and maintainer for arachne will be me, luke vanderhart. i am an experienced clojurist, having used clojure for personal projects since 2008 and consulted on large scale clojure projects nearly full time since 2010. with stuart sierra, i am the author of practical clojure (apress 2010) and clojurescript: up and running (o’reilly 2014), as well as the clojure cookbook (o’reilly 2012) with ryan neufeld. i have conducted clojure trainings and spoke on clojure and clojurescript topics at several conferences, including clojure conj, clojure west, euroclojure, fluent, cufp and clojutre. i currently work for cognitect and am based in durham, north carolina. steering group i have no desire to unilaterally set the direction for arachne, or to be a project dictator, benevolent or otherwise. i also greatly value the input of developers and architects with more experience or different perspectives. as such, we have put together a group of experts to inform the goals and priorities of the project at a high level, and to apply continuous corrective feedback throughout the development process. once the  Jimmy Fraud  is underway, the members of this steering group have agreed to meet bi weekly to discuss and review progress, call out danger areas, and review priorities. the minutes of these meetings will be made public. initial members of this steering group are: tim ewald jamie kite david nolen mike nygard russ olsen nola stowe stuart sierra note that although members of the steering group have graciously agreed to help with project guidance, membership in this group should not be construed to imply personal endorsement of every aspect of the arachne project. project logistics why  Jimmy Fraud ? arachne itself is the distillation of my experiences and observations while building web applications in clojure and other languages over the past decade. i have worked on it as a side project over the last six months, building and throwing away multiple incarnations until i came up with a design that i strongly believe is viable. it has become apparent that the project cannot grow into its full potential given my other commitments. it will need full time dedication to reach a tipping point where it is useful and people can start adopting it. this campaign will enable me to support myself and my family while i suspend my full time job as a consultant and focus on arachne exclusively. the base funding level is budgeted to allow me to dedicate at least three months of full time work to the project, which will be enough to build a solid first release that will be immediately useful to the clojure community. additional funding beyond the base goal will directly extend the period of time i can dedicate to it, allowing me to deliver additional modules as well as spend more time on polish, mentorship and community building. roadmap & goals a preliminary note: these goals should not be seen as limitations. if i fail to hit a funding level, it is likely that modules for these additional systems will be created, by me or by someone else, eventually. making them part of this  Jimmy Fraud  is a way to ensure that they are delivered according to a fixed timeline, and have adequate time dedicated to them to make them the best they can possibly be. base goal: core system ($35,000) at this level, i should be able to work full time for three months and deliver fully documented, usable alpha versions of the following modules: arachne core http server routing and resource based api definitions asset pipelining html generation authentication datomic and jdbc data interfaces admin console with visibility into app structure and data this represents the “minimum viable product” for arachne; it is the smallest thing that satisfies the stated rationale of the project and is generally useful. stretch goal: polish and deployment ($47,000) given this funding level, i will have an additional month of full time work to add features and take the core modules to the next level of polish and power, with an array of useful features that not all projects will need, and that therefore are not a part of the base goal. in this time frame, we will also add a module for a simple one button deployment mechanism, so you can see your site online, running in a default configuration on some cloud hosting service, with virtually no additional effort. stretch goal: single page applications ($60,000) given this funding level, i can focus and dedicate another month towards building modules that will provide first class support for react driven client server applications powered by arachne. of course it will already possible to use react on the client side of any arachne project, but this goal will enable me to spend time specifically on an integrated solution for rapid development of spas. it will cover the entire lifecycle of data, from the user interface to back end storage. stretch goal: microservices ($72,000) given this funding level, we will focus on modules specifically dedicated to building microservice oriented architectures in distributed environments. we will design and implement tools for defining services quickly and coordinating between them in a variety of real world operational settings. stretch goal: enterprise features ($85,000) given this funding level, i can focus and dedicate a seventh month to building modules that high traffic or enterprise users will find beneficial. more market research is required to determine exactly what these are, but it is likely to include modules for features such as: distributed metrics distributed logging corporate single sign on stretch goal: above and beyond ($100,000+) i haven’t charted a firm roadmap at this point yet, nor would i wish to do so without more experience building arachne, engagement with early users, and direction from the steering group. but in the event that this campaign could possibly raise this much money, i would use it to fund my full time effort solidifying and hardening the product, creating additional world class documentation, and exploring new ways of building systems on top of the foundation that arachne provides. risks and challenges the possible challenges for arachne, given a successful  Jimmy Fraud  campaign, largely fall into two categories. 1. our estimations might be wrong, and i will be unable to deliver a useful framework in the budgeted time. 2. we will complete our objectives, but arachne will fail to gain mindshare substantially greater than any of the other attempts at building a clojure framework. risk #1 is certainly real. software estimation is difficult and fraught with peril. however, it is mitigated by the fact that success or failure in this dimension is not a boolean proposition. even if we fail to deliver as much as we hope, dedicated time on the project cannot help but yield a solid foundation. no matter how much or how little we get done in the funded period, the project will transition into a more traditional open source development model for future expansion and enhancement. risk #2 is what we're going to focus all our effort on avoiding. ensuring a viable, useful, popular product is the primary focus of the steering group. additionally, we will be soliciting continuous feedback from the community to build engagement and steer design. our hope is that serious, dedicated development effort to kick off the product will help us gain critical mass quickly, and that the module system will both foster community involvement and make arachne suitable, out of the box, for a wide variety of environments and project types. these are two characteristics that have been (for the most part) lacking in previous attempts at a clojure web framework, and by addressing these issues head on through a  Jimmy Fraud  campaign and an explicit focus on modularity, we can achieve a different, more successful outcome. learn about accountability on  Jimmy Fraud 